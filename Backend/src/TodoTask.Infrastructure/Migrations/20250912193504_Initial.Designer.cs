// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoTask.Infrastructure.Common.Contexts;

#nullable disable

namespace TodoTask.Infrastructure.Migrations
{
    [DbContext(typeof(TodoTaskDbContext))]
    [Migration("20250912193504_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoTask.Domain.Aggregates.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("character varying(700)")
                        .HasColumnName("description");

                    b.Property<Guid?>("ExecutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("executor_id");

                    b.Property<Guid?>("ParentIssueId")
                        .HasColumnType("uuid");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentIssueId");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("TodoTask.Domain.Entities.RelationIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.Property<Guid>("RelatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("related_id");

                    b.Property<Guid>("RelatedIssueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RelatedIssueId");

                    b.HasIndex("IssueId", "RelatedId")
                        .IsUnique();

                    b.ToTable("relation_issues", (string)null);
                });

            modelBuilder.Entity("TodoTask.Domain.Aggregates.Issue", b =>
                {
                    b.HasOne("TodoTask.Domain.Aggregates.Issue", null)
                        .WithMany("SubIssues")
                        .HasForeignKey("ParentIssueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TodoTask.Domain.Entities.RelationIssue", b =>
                {
                    b.HasOne("TodoTask.Domain.Aggregates.Issue", "Issue")
                        .WithMany("RelatedIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_relation_issue_issue");

                    b.HasOne("TodoTask.Domain.Aggregates.Issue", "RelatedIssue")
                        .WithMany()
                        .HasForeignKey("RelatedIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("RelatedIssue");
                });

            modelBuilder.Entity("TodoTask.Domain.Aggregates.Issue", b =>
                {
                    b.Navigation("RelatedIssues");

                    b.Navigation("SubIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
